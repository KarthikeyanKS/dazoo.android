{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Project setup\
\
Libraries being used:\
-----------------------------------------------------\
\
- FacebookSDK;\
- LoopingViewPager;\
- android-support-v7-compat;\
- PullToRefresh;\
- ViewPagerIndicator.\
\
All of those should be marked as "isLibrary" when importing to Eclipse under Properties/Android\
\
Packages:\
-------------------------------------------------------\
- com.damnhandy.uri.template and com.damnhandy.uri.template.impl - necessary for the custom http client;\
- com.millicom.secondscreen - main package that contains constant declaration and application file that stores the application shared preferences;\
- com.millicom.secondscreen.adapters - adapters for the different list views and fragments;\
- com.millicom.secondscreen.authentication - login/sign up/reset password functionality and corresponding activities;\
- com.millicon.secondscreen.content - classes to read different json-pages from backend using custom http client - tag page, tv date page, channel page, guide page etc; SSActivity - super class for the activities in the application that extends ActionBarActivity to have the action bar supported in the lower versions of Android;\
- com.millicom.secondscreen.content.activity - activity page and popular page activities with corresponding functionalities;\
-  com.millicom.secondscreen.content.homepage - launcher activity for the application that hosts the fragment with ViewPager that is updated when there is change in the date, sorting, login/logout and list of channels;\
- com.millicom.secondscreen.content.model - domain models that are used in the application, corresponding to the domain model that exist at the backend;\
- com.millicom.secondscreen.content.myprofile - activities that represent the pages under My Profile - list of likes, channels, reminders, help information, information about the current user and hint for login/signup;\
- com.millicom.secondscreen.content.search - activity reserved for the future search functionality;\
- com.millicom.secondscreen.content.tvguide - activities to represent different variants of the tv-guide table: tv guide table fragment and tv guide tag fragments, channel page, broadcast page and connected pages;\
- com.millicom.secondscreen.customviews - custom views that are used in the application: textview, button and edit view with possibility to set the custom font;\
- com.millicom.secondscreen.http - custom http client;\
- com.millicom.secondscreen.like - specific to application "like" functionality - requests to backend and connected views;\
- com.millicom.secondscreen.manager - ContentParser for parsing different JSON pages generated by the backend; DazooCore - manager of the requests to the backend;\
- com.millicom.secondscreen.mychannels - functionality for the channels fetching/adding/deleting for the specific user;\
- com.millicom.secondscreen.notification - reminders functionality which is built on saving the notifications to the SQLite database and alarm manager that fires the specific notification 15 minutes before the beginning of the broadcast; the alarms are set again after the phone reboot;\
- com.millicom.secondscreen.share - share functionality that employs the standard Android share action;\
- com.millicom.secondscreen.storage - functionality to store the current content in the singleton, so less requests to the backend are necessary. Currently, tv dates, tags, channels, likes, day guides and individual channel guides are stored in the DazooStore singleton. DazooStoreOperations - helper class to write the content into specific data structures, to identify the content in the hash-maps custom object keys - GuideKey and BroadcastKey classes are used;\
- com.millicom.secondscreen.utilities - helper classes.\
\
\
HockeyApp:\
-------------------------------------------------------\
To send new version to the HockeyApp: copy the *.apk from the bin folder in the project and drag-and-drop it to the HockeyApp upload apk section.\
\
}